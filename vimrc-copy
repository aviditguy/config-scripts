call plug#begin()
Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'Yggdroot/indentLine'
Plug 'preservim/nerdcommenter'
Plug 'cocopon/iceberg.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'prettier/vim-prettier'
Plug 'rhysd/vim-clang-format'
Plug 'neoclide/coc.nvim'
call plug#end()

filetype plugin indent on
set nu rnu
set ts=2 sts=2 sw=2 et ai si
set cursorline
set hlsearch incsearch
nnoremap jk <esc>:update<cr>
inoremap jk <esc>:update<cr>a

set background=dark
colorscheme iceberg

" nerdtree config
nnoremap <C-b> :NERDTreeToggle<CR>
inoremap <C-b> <esc>:NERDTreeToggle<CR>i

" lightline.vim config
set laststatus=2
set noshowmode

" indentline config
let g:indentLine_showFirstIndentLevel = 1
let g:indentline_fileTypeExclude = ["vimwiki", "coc-explorer", "help", "undotree", "diff"]
let g:indentline_bufTypeExclude = ["help", "terminal"]
let g:indentline_leadingSpaceEnabled = 1

" nerdcommenter use cc to toggle comment
nnoremap <silent> cc :call nerdcommenter#Comment(0, 'toggle')<CR>
inoremap <silent> cc <C-o>:call nerdcommenter#Comment(0, 'toggle')<CR>
vnoremap <silent> cc :call nerdcommenter#Comment(0, 'toggle')<CR>

" fzf config use ctrl+p to search file
nnoremap <C-p> :Files<CR>
inoremap <C-p> <C-o>:Files<CR>

" vim-prettier config
" Enable formatting on save
let g:prettier#autoformat = 1
" Specify file types to format on save
let g:prettier#autoformat_require_pragma = 0
let g:prettier#autoformat_config_files = {
      \ '*.js': 1,
      \ '*.jsx': 1,
      \ '*.html': 1,
      \ '*.css': 1,
      \ '*.tsx': 1,
      \ '*.ts': 1
      \ }

" vim-clangd-format config
" Automatically format on save
autocmd BufWritePre *.c,*.cpp,*.h,*.hpp execute 'ClangFormat'
" Set the path to ClangFormat executable
let g:clang_format#executable = 'clang-format'

" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<C-g>u\<TAB>"
